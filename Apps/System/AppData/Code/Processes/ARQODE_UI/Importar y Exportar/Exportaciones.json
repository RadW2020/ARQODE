{
  "$schema": "..\\Schemas\\Schema_base_process.json",
  "description": "Exportaciones",
  "processes": [
    {
      "Guid": "17250dd1-6cd2-4b1b-a7cd-58ec52297bb8",
      "Name": "Exportar programa",
      "Description": "",
      "Version": "1.0",
      "Configuration": [],
      "Default_Configuration": [],
      "Inputs": [
        "Fichero de salida"
      ],
      "Outputs": [],
      "Code": "Ly9JTkkgQ09ERSBQUkNHVUlEOiAxNzI1MGRkMS02Y2QyLTRiMWItYTdjZC01OGVjNTIyOTdiYjgNCg0KICAgICAgICAgICAgICAgIFN0cmluZyBmaWNoZXJvX2RlX3NhbGlkYSA9IElucHV0X3N0cigiRmljaGVybyBkZSBzYWxpZGEiKTsNCiAgICAgICAgICAgICAgICBpZiAoZmljaGVyb19kZV9zYWxpZGEgIT0gIiIpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IHByb2dyYW0NCiAgICAgICAgICAgICAgICAgICAgQVJRT0RFX1VJLkdlc3RvclByb2dyYW1hcy5DVmVudGFuYVByb2dyYW1hcyBDVmVudGFuYVByb2dyYW1hcyA9IG5ldyBBUlFPREVfVUkuR2VzdG9yUHJvZ3JhbWFzLkNWZW50YW5hUHJvZ3JhbWFzKHZtKTsNCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIG5zX3Byb2dyYW1hID0gQ1ZlbnRhbmFQcm9ncmFtYXMuTmFtZXNwYWNlX3Byb2dyYW1hX2FjdGl2by5Ub1N0cmluZygpOw0KDQogICAgICAgICAgICAgICAgICAgIC8vIHByb2dyYW0gc3RhY2sgZm9yIHJlY3Vyc2l2ZSBleHBsb3JhdGlvbg0KICAgICAgICAgICAgICAgICAgICBTdGFjazxLZXlWYWx1ZVBhaXI8aW50LCBDUHJvZ3JhbT4+IHNfcHJvZyA9IG5ldyBTdGFjazxLZXlWYWx1ZVBhaXI8aW50LCBDUHJvZ3JhbT4+KCk7DQoNCiAgICAgICAgICAgICAgICAgICAgLy8gUHJvZ3MgYW5kIHByb2NzIGRpY3Rpb25hcnlzIA0KICAgICAgICAgICAgICAgICAgICBEaWN0aW9uYXJ5PFN0cmluZywgSlRva2VuPiBleHBfcHJvZ3JhbXMgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIEpUb2tlbj4oKTsNCiAgICAgICAgICAgICAgICAgICAgRGljdGlvbmFyeTxTdHJpbmcsIEpUb2tlbj4gZXhwX3Byb2Nlc3NlcyA9IG5ldyBEaWN0aW9uYXJ5PFN0cmluZywgSlRva2VuPigpOw0KDQogICAgICAgICAgICAgICAgICAgIENQcm9ncmFtIGNwcm9nID0gbmV3IENQcm9ncmFtKHN5cywgQXBwX2dsb2JhbHMsIG5zX3Byb2dyYW1hKTsNCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuc19wcm9ncmFtYSAhPSAiIikgfHwgKHNfcHJvZy5Db3VudCA+IDApKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbnQgaSA9IDA7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgcHJvZ3JhbSBmcm9tIHN0YWNrDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3Byb2cgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBLZXlWYWx1ZVBhaXI8aW50LCBDUHJvZ3JhbT4ga19wcm9nID0gc19wcm9nLlBvcCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBrX3Byb2cuS2V5Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcm9nID0ga19wcm9nLlZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgaW50IG5fcHJjcyA9ICgoSkFycmF5KWNwcm9nLkxvZ2ljKS5Db3VudDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2wgZm9yY2VfZXhpdCA9IGZhbHNlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXZlIHByb2dyYW0gYW5kIGlubmVyIHByb2Nlc3Nlcw0KICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCghZm9yY2VfZXhpdCkgJiYgKGkgPCBuX3ByY3MpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRQcm9jZXNzIHByb2MgPSBuZXcgVFByb2Nlc3Moc3lzLCBBcHBfZ2xvYmFscywgKEpPYmplY3QpKChKQXJyYXkpY3Byb2cuTG9naWMpLkVsZW1lbnRBdChpKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFleHBfcHJvZ3JhbXMuQ29udGFpbnNLZXkoY3Byb2cuUHJvZ3JhbV9uYW1lc3BhY2UpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHByb2dyYW0gb25seSBvbmNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cF9wcm9ncmFtcy5BZGQoY3Byb2cuUHJvZ3JhbV9uYW1lc3BhY2UsIGNwcm9nLmdldF9qc29uLkRlZXBDbG9uZSgpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKys7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2MuR3VpZCA9PSAiQ2FsbCIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgY3VycmVudCBwcm9ncmFtIHRvIHN0YWNrIGFuZCBhdGFjaCB0aGUgbmV3IG9uZSBmb3IgZXhwbG9yZSByZWN1cnNpdmVseQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzX3Byb2cuUHVzaChuZXcgS2V5VmFsdWVQYWlyPGludCwgQ1Byb2dyYW0+KGksIGNwcm9nKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcm9nID0gbmV3IENQcm9ncmFtKHN5cywgQXBwX2dsb2JhbHMsIHByb2MuQ29uZmlndXJhdGlvblsicHJvZ3JhbSJdLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuc19wcm9ncmFtYSA9IGNwcm9nLlByb2dyYW1fbmFtZXNwYWNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZV9leGl0ID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWV4cF9wcm9jZXNzZXMuQ29udGFpbnNLZXkocHJvYy5HdWlkKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBwcm9jZXNzIG9ubHkgb25jZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBfcHJvY2Vzc2VzLkFkZChwcm9jLkd1aWQsIHByb2MuZ2V0X2pzb24uRGVlcENsb25lKCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaSA9PSBuX3ByY3MpICYmICghZm9yY2VfZXhpdCkpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG51bGwgcHJvZ3JhbSBvbmx5IGlmIHByZXZpb3VzIGJ1Y2xlIGVuZHMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHJvZyA9IG51bGw7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbnNfcHJvZ3JhbWEgPSAiIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gQ3JlYXRlIHppcCAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgSW9uaWMuWmlwLlppcEZpbGUgZXhwX2ZpbGUgPSBudWxsOw0KICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZS5FeGlzdHMoZmljaGVyb19kZV9zYWxpZGEpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBleHBfZmlsZSA9IElvbmljLlppcC5aaXBGaWxlLlJlYWQoZmljaGVyb19kZV9zYWxpZGEpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZXhwX2ZpbGUgPSBuZXcgSW9uaWMuWmlwLlppcEZpbGUoZmljaGVyb19kZV9zYWxpZGEpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBhZGQgcHJvZ3JhbXMgJiBucyBjb252ZXJzaW9ucyB0byB6aXAgZmlsZQ0KDQogICAgICAgICAgICAgICAgICAgIFN0cmluZyBlbnRyeV9wYXRoID0gIiI7DQogICAgICAgICAgICAgICAgICAgIFN0cmluZyBiYXNlX2ZpbGVfcGF0aCA9ICIiOw0KICAgICAgICAgICAgICAgICAgICBKQXJyYXkgakNvbnZlcnNpb24gPSBuZXcgSkFycmF5KCk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGV4cF9maWxlLkNvbnRhaW5zRW50cnkoZEVYUE9SVENPREUuU1RSX0lNUE9SVF9DT05WUykpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIElvbmljLlppcC5aaXBFbnRyeSB6ZSA9IGV4cF9maWxlLkVudHJpZXMuV2hlcmUoZW50cnkgPT4gZW50cnkuRmlsZU5hbWUgPT0gZEVYUE9SVENPREUuU1RSX0lNUE9SVF9DT05WUykuRmlyc3RPckRlZmF1bHQoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgTWVtb3J5U3RyZWFtIG1zID0gbmV3IE1lbW9yeVN0cmVhbSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgemUuRXh0cmFjdChtcyk7DQogICAgICAgICAgICAgICAgICAgICAgICBieXRlW10gZW50cnlfZGF0YSA9IG1zLlRvQXJyYXkoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyBmaWxlX2NvbnRlbnQgPSBTeXN0ZW0uVGV4dC5FbmNvZGluZy5EZWZhdWx0LkdldFN0cmluZyhlbnRyeV9kYXRhKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIG1zLkNsb3NlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBqQ29udmVyc2lvbiA9IEpBcnJheS5QYXJzZShmaWxlX2NvbnRlbnQpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKFN0cmluZyBzcHJvZyBpbiBleHBfcHJvZ3JhbXMuS2V5cykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgYmFzZV9maWxlX3BhdGggPSBlc2NhcGVfc2Moc3Byb2cpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAvLyBDb252ZXJzaW9ucw0KICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nIG5ld19ucyA9IGRQUk9HUkFNLkZPTERFUiArICJcXEltcG9ydHNcXCIgKyBiYXNlX2ZpbGVfcGF0aDsNCiAgICAgICAgICAgICAgICAgICAgICAgIEpPYmplY3QgamNvbnYgPSBuZXcgSk9iamVjdChuZXcgSlByb3BlcnR5KHNwcm9nLCBuZXdfbnMpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGpDb252ZXJzaW9uLkFkZChqY29udik7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBwcm9ncmFtDQogICAgICAgICAgICAgICAgICAgICAgICBlbnRyeV9wYXRoID0gZFBST0dSQU0uRk9MREVSICsgIlxcSW1wb3J0c1xcIiArIGJhc2VfZmlsZV9wYXRoICsgIi5qc29uIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXhwX2ZpbGUuQ29udGFpbnNFbnRyeShlbnRyeV9wYXRoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBfZmlsZS5BZGRFbnRyeShlbnRyeV9wYXRoLCBTeXN0ZW0uVGV4dC5VVEY4RW5jb2RpbmcuVVRGOC5HZXRCeXRlcyhleHBfcHJvZ3JhbXNbc3Byb2ddLlRvU3RyaW5nKCkpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoZXhwX2ZpbGUuQ29udGFpbnNFbnRyeShkRVhQT1JUQ09ERS5TVFJfSU1QT1JUX0NPTlZTKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZXhwX2ZpbGUuVXBkYXRlRW50cnkoZEVYUE9SVENPREUuU1RSX0lNUE9SVF9DT05WUywgakNvbnZlcnNpb24uVG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBleHBfZmlsZS5BZGRFbnRyeShkRVhQT1JUQ09ERS5TVFJfSU1QT1JUX0NPTlZTLCBqQ29udmVyc2lvbi5Ub1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uDQoNCiAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBDcmVhdGUgcHJvY2Vzc2VzIGZpbGUNCg0KICAgICAgICAgICAgICAgICAgICBKU29uRmlsZSBqZlRlbXBsYXRlID0gbmV3IEpTb25GaWxlKEdsb2JhbHMuQXBwRGF0YVNlY3Rpb24oZFBBVEguUFJPQ0VTU0VTKSwgZEdMT0JBTFMuUFJPQ0VTU19URU1QTEFURS5SZXBsYWNlKCIuanNvbiIsICIiKSk7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKEpUb2tlbiBqcHJvYyBpbiBleHBfcHJvY2Vzc2VzLlZhbHVlcykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgKChKQXJyYXkpamZUZW1wbGF0ZS5nZXQoZFBST0NFU1MuUFJPQ0VTU0VTKSkuQWRkKGpwcm9jKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uDQoNCiAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBhZGQgcHJvY2Vzc2VzIGZpbGUNCg0KICAgICAgICAgICAgICAgICAgICBiYXNlX2ZpbGVfcGF0aCA9IGVzY2FwZV9zYyhDVmVudGFuYVByb2dyYW1hcy5OYW1lc3BhY2VfcHJvZ3JhbWFfYWN0aXZvLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgICAgICBlbnRyeV9wYXRoID0gZFBST0NFU1MuRk9MREVSICsgIlxcSW1wb3J0c1xcIiArIGJhc2VfZmlsZV9wYXRoICsgIi5qc29uIjsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFleHBfZmlsZS5Db250YWluc0VudHJ5KGVudHJ5X3BhdGgpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBleHBfZmlsZS5BZGRFbnRyeShlbnRyeV9wYXRoLCBTeXN0ZW0uVGV4dC5VVEY4RW5jb2RpbmcuVVRGOC5HZXRCeXRlcyhqZlRlbXBsYXRlLmpBY3RpdmVPYmouVG9TdHJpbmcoKSkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24NCg0KICAgICAgICAgICAgICAgICAgICBleHBfZmlsZS5TYXZlKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbg0KDQogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VCb3guU2hvdyhTdHJpbmcuRm9ybWF0KCJQcm9ncmFtIGV4cG9ydGVkIHswfSIsIENWZW50YW5hUHJvZ3JhbWFzLk5hbWVzcGFjZV9wcm9ncmFtYV9hY3Rpdm8uVG9TdHJpbmcoKSkpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vRU5EIENPREUgUFJDR1VJRDogMTcyNTBkZDEtNmNkMi00YjFiLWE3Y2QtNThlYzUyMjk3YmI4"
    }
  ]
}